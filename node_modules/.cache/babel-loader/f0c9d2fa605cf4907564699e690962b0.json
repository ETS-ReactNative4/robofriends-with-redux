{"ast":null,"code":"import _classCallCheck from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Work\\\\robofriends-with redux\\\\src\\\\containers\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox'; //import { robots } from './Robots';\n\nimport Scroll from '../components/Scroll';\nimport Errorboundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots } from '../actions';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    //the following property name can be anything\n    onSearchChange: function onSearchChange(event) {\n      return dispatch(setSearchField(event.target.value));\n    },\n    onRequestRobots: function onRequestRobots() {\n      return dispatch(requestRobots());\n    }\n  };\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n\n    /*constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            //searchField: ''\r\n        }\r\n    }\r\n    */\n    value: function componentDidMount() {\n      this.props.onRequestRobots(); //console.log(this.props.store.getState());\n\n      /*fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response => response.json())\r\n          .then(users => this.setState({ robots: users })) */\n\n      /*check the last line like this: \r\n      .then(users => {})*/\n    }\n    /*searchChanges = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      //const { robots, searchField } = this.state;\n      var _this$props = this.props,\n          searchField = _this$props.searchField,\n          onSearchChange = _this$props.onSearchChange,\n          robots = _this$props.robots,\n          isPending = _this$props.isPending;\n      var filteredRobots = robots.filter(function (robot) {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\n      }); //       if (robots.length === 0) {\n      // OR\n\n      /*\r\n              if (!robots.length) {\r\n                  return <h1>Loading...</h1>\r\n              } else {\r\n                  return (*/\n      // OR\n\n      return isPending ? React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Loading...\") : React.createElement(\"div\", {\n        className: \"tc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"f2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"RoboFriends\"), React.createElement(SearchBox, {\n        searchChange: onSearchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Scroll, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Errorboundary, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Cardlist, {\n        robots: filteredRobots,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\n;\n/*const App = () => {\r\n    return (\r\n        <div className='tc'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox />\r\n        <Cardlist robots = { robots } />\r\n        </div>\r\n    );\r\n};*/\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Work\\robofriends-with redux\\src\\containers\\App.js"],"names":["React","Component","connect","Cardlist","SearchBox","Scroll","Errorboundary","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","props","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,YAA9C;;AAGA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD7B;AAEHE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFzB;AAGHC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAH5B;AAIHC,IAAAA,KAAK,EAAEL,KAAK,CAACF,aAAN,CAAoBO;AAJxB,GAAP;AAMH,CAPD;;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAO;AACH;AACAC,IAAAA,cAAc,EAAE,wBAACC,KAAD;AAAA,aAAWF,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAAnB;AAAA,KAFb;AAGHC,IAAAA,eAAe,EAAE;AAAA,aAAML,QAAQ,CAACT,aAAa,EAAd,CAAd;AAAA;AAHd,GAAP;AAKH,CAND;;IAQMe,G;;;;;;;;;;;;;;AACF;;;;;;;;wCAQoB;AAChB,WAAKC,KAAL,CAAWF,eAAX,GADgB,CAEhB;;AACA;;;;AAGA;;AAEH;AAED;;;;;;6BAIS;AACL;AADK,wBAEsD,KAAKE,KAF3D;AAAA,UAEGb,WAFH,eAEGA,WAFH;AAAA,UAEgBO,cAFhB,eAEgBA,cAFhB;AAAA,UAEgCL,MAFhC,eAEgCA,MAFhC;AAAA,UAEwCC,SAFxC,eAEwCA,SAFxC;AAGL,UAAMW,cAAc,GAAGZ,MAAM,CAACa,MAAP,CAAc,UAAAC,KAAK,EAAI;AAC1C,eAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCnB,WAAW,CAACkB,WAAZ,EAAlC,CAAP;AACH,OAFsB,CAAvB,CAHK,CAOL;AACA;;AACA;;;;;AAKA;;AAEA,aAAOf,SAAS,GACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADY,GAIR;AAAK,QAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAGI,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAGO,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CAHJ,CAJR;AAeH;;;;EAtDaxB,S;;AAuDjB;AAED;;;;;;;;;;AAUA,eAAeC,OAAO,CAACO,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\n//import { robots } from './Robots';\r\nimport Scroll from '../components/Scroll';\r\nimport Errorboundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        //the following property name can be anything\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    /*constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            //searchField: ''\r\n        }\r\n    }\r\n*/\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n        //console.log(this.props.store.getState());\r\n        /*fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users })) */\r\n        /*check the last line like this: \r\n        .then(users => {})*/\r\n    }\r\n\r\n    /*searchChanges = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }*/\r\n\r\n    render() {\r\n        //const { robots, searchField } = this.state;\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        //       if (robots.length === 0) {\r\n        // OR\r\n        /*\r\n                if (!robots.length) {\r\n                    return <h1>Loading...</h1>\r\n                } else {\r\n                    return (*/\r\n        // OR\r\n\r\n        return isPending ? \r\n            <h1>Loading...</h1> \r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={ onSearchChange } />\r\n                    <Scroll>\r\n                        <Errorboundary>\r\n                            <Cardlist robots={ filteredRobots } />\r\n                        </Errorboundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        ;\r\n    }\r\n};\r\n\r\n/*const App = () => {\r\n    return (\r\n        <div className='tc'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox />\r\n        <Cardlist robots = { robots } />\r\n        </div>\r\n    );\r\n};*/\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}