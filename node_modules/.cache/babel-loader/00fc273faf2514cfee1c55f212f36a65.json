{"ast":null,"code":"import _objectSpread from \"C:\\\\Work\\\\robofriends-with redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nvar initialStateSearch = {\n  searchField: ''\n};\nexport var searchRobots = function searchRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateSearch;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  //console.log(action.type);\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      //return Object.assign({}, state, {searchField: action.payload});\n      return _objectSpread({}, state), {\n        searchField: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nvar initialStateRobots = {\n  ispending: false,\n  robots: [],\n  error: ''\n};\nexport var requestRobots = function requestRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateRobots;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        ispending: true\n      });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        ispending: false\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        ispending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:\\Work\\robofriends-with redux\\src\\reducers.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","searchRobots","state","action","type","payload","initialStateRobots","ispending","robots","error","requestRobots","Object","assign"],"mappings":";AAAA,SACIA,kBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,EAIIC,qBAJJ,QAKO,aALP;AAOA,IAAMC,kBAAkB,GAAG;AACvBC,EAAAA,WAAW,EAAE;AADU,CAA3B;AAIA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAA2C;AAAA,MAA1CC,KAA0C,uEAApCH,kBAAoC;AAAA,MAAhBI,MAAgB,uEAAP,EAAO;;AACnE;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,kBAAL;AACI;AACA,aAAQ,kBAAIO,KAAJ,GAAa;AAAEF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAAtB,OAArB;;AACJ;AACI,aAAOH,KAAP;AALR;AAOH,CATM;AAWP,IAAMI,kBAAkB,GAAG;AACvBC,EAAAA,SAAS,EAAE,KADY;AAEvBC,EAAAA,MAAM,EAAE,EAFe;AAGvBC,EAAAA,KAAK,EAAE;AAHgB,CAA3B;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAA6C;AAAA,MAA5CR,KAA4C,uEAApCI,kBAAoC;AAAA,MAAhBH,MAAgB,uEAAP,EAAO;;AACtE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,sBAAL;AACI,aAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAAEK,QAAAA,SAAS,EAAE;AAAb,OAAzB,CAAP;;AACJ,SAAKV,sBAAL;AACI,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAAEM,QAAAA,MAAM,EAAEL,MAAM,CAACE,OAAjB;AAA0BE,QAAAA,SAAS,EAAE;AAArC,OAAzB,CAAP;;AACJ,SAAKT,qBAAL;AACI,aAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAAEO,QAAAA,KAAK,EAAEN,MAAM,CAACE,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAAzB,CAAP;;AACJ;AACI,aAAOL,KAAP;AARR;AAUH,CAXM","sourcesContent":["import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action = {}) => {\r\n    //console.log(action.type);\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD: \r\n            //return Object.assign({}, state, {searchField: action.payload});\r\n            return ({...state }, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    ispending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { ispending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, ispending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, ispending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}