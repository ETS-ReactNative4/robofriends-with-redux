{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","Cardlist","_ref","robots","map","robofriend","index","components_Card","key","picture","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Errorboundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","console","log","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","ErrorBoundary","components_Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","ispending","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f199e7cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card = ({ name, email, picture }) => {\r\nconst Card = (props) => { \r\n     const { name, email, id } = props; \r\n    return (\r\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            {/* <img src={picture} alt=\"\" width=\"200px\"/> */}\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n /*   if (true) {\r\n        throw new Error('NOOOOOO');\r\n    }*/\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((robofriend, index) => {\r\n                return (\r\n                    <Card \r\n                    key={index} \r\n                    id={robofriend.id} \r\n                    picture={robofriend.picture} \r\n                    name={robofriend.name} \r\n                    email={robofriend.email} \r\n                    />\r\n                );   \r\n            })\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='searchbox'\r\n                placeholder='Search Robot'\r\n                onChange = { searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '470px'}}>\r\n            {props.children}\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass Errorboundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n\r\n        }\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return { hasError: true};\r\n    // }\r\n\r\n    componentDidCatch( error, info ) {\r\n      //  this.setState.hasError = true;\r\n      console.log(error);\r\n      this.setState({\r\n          hasError: true\r\n      });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.hasError ? \r\n                <h1>Ooops. That is not gooood at all.</h1> \r\n                : this.props.children\r\n        )\r\n    }\r\n}\r\nexport default Errorboundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\n//import { robots } from './Robots';\r\nimport Scroll from '../components/Scroll';\r\nimport Errorboundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return {\r\n        //the following property name can be anything\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    /*constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            //searchField: ''\r\n        }\r\n    }\r\n*/\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n        //console.log(this.props.store.getState());\r\n        /*fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users })) */\r\n        /*check the last line like this: \r\n        .then(users => {})*/\r\n    }\r\n\r\n    /*searchChanges = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }*/\r\n\r\n    render() {\r\n        //const { robots, searchField } = this.state;\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        //       if (robots.length === 0) {\r\n        // OR\r\n        /*\r\n                if (!robots.length) {\r\n                    return <h1>Loading...</h1>\r\n                } else {\r\n                    return (*/\r\n        // OR\r\n\r\n        return isPending ? \r\n            <h1>Loading...</h1> \r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2'>RoboFriends</h1>\r\n                    <SearchBox searchChange={ onSearchChange } />\r\n                    <Scroll>\r\n                        <Errorboundary>\r\n                            <Cardlist robots={ filteredRobots } />\r\n                        </Errorboundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        ;\r\n    }\r\n};\r\n\r\n/*const App = () => {\r\n    return (\r\n        <div className='tc'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox />\r\n        <Cardlist robots = { robots } />\r\n        </div>\r\n    );\r\n};*/\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    //console.log(text);\r\n    return {\r\n        type: CHANGE_SEARCHFIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\n//exporting a function (see below) would result in an error (redux understand only objects), but by adding redux-thunk middleware. redux-thunk gives us the dispatch function.\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data} ))\r\n            .then(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error} ))\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action = {}) => {\r\n    //console.log(action.type);\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD: \r\n            //return Object.assign({}, state, {searchField: action.payload});\r\n            return ({...state }, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    ispending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { ispending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, ispending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, ispending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport './containers/App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n\r\n//const store = createStore(rootReducer); <-- the parameter is the reducer(s)\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \r\n\r\nReactDOM.render(\r\n    \r\n    <Provider store={ store }>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}